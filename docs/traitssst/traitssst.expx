<?xml version="1.0" encoding="UTF-8"?>
<experiment xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:noNamespaceSchemaLocation="https://labbench.io/xsd/4.1.0/experiment.xsd">
<description>      
</description>
  <subject-validator regex="^S[0-9]{3}$"
                     advice="Please enter an ID in the form of SXXX, where X is a digit" />
    <experimental-setup>
        <devices>
            <lio
                id="lio" 
                default-analog-output="0">
                <response-devices>
                    <response-pad
                        id="pad" 
                        type="button-4-cross" 
                        timing-source="response-port02">
                        <map experimental-setup-id="survey">
                            <button-assignment code="8" button="up"/>
                            <button-assignment code="2" button="increase" />
                            <button-assignment code="1" button="down" />
                            <button-assignment code="4" button="decrease" />
                            <button-assignment code="6" button="previous"/>
                            <button-assignment code="5" button="next"/>
                        </map>                      
                        <map experimental-setup-id="image">
                            <button-assignment code="6" button="left" label="left" />
                            <button-assignment code="5" button="right" label="right" />
                        </map>
                    </response-pad>
                    <visual-trigger 
                        id="vtrig"
                        arming-period="200" 
                        timing-source="response-port02" />
                </response-devices>
            </lio>

            <display
                id="display"
                active-color="rgb(255,255,255)"
                background-color="rgb(0,0,0)"
                inactive-color="rgb(32,32,32)"
                normative-distance="40"
                position="fullscreen"
                screen="secondary">

                <monitor
                    diagonal-size="13.3"
                    diagonal-size-unit="inch"
                    distance="40"
                    length-unit="cm"/>

                <configurations>
                    <survey 
                        id="survey"
                        experimental-setup-id="survey"
                        background-color="rgb(255,255,255)" />     

                    <image-display
                        id="image"
                        experimental-setup-id="image"
                        background-color="rgb(0,0,0)" />                              
                </configurations>                
            </display>         
        </devices>
        <device-mapping>
            <device-assignment 
                test-type="electrophysiology-evoked-potentials"
                device-id="lio.pad"
                instrument-name="Response" />

            <device-assignment
                test-type="electrophysiology-evoked-potentials"
                device-id="display.image"
                instrument-name="ImageDisplay"/>
        </device-mapping>     
    </experimental-setup>    
    <protocol>
        <languages>
            <language code="EN"
                      name="English"/>
            <language code="DA"
                      name="Danish"/>
            <language code="IT"
                      name="Italian"/>
        </languages>  
        
        <defines>
            <define 
                name="PCSText" 
                value="func: PCSTEXT.CreateText(tc)"/>
            <define
                name="Images"
                value="func: Script.CreateImages(tc)"/>
            <define 
                name="TrainingStopSignals" 
                value="4"/> 
            <define 
                name="NumberOfStopSignals" 
                value="30"/> 
            <define
                name="LowDelayLimit"
                value="50"/>
            <define
                name="HighDelayLimit"
                value="750"/>
            <define
                name="FixationDelay"
                value="500"/>
            <define
                name="ResponseTimeout"
                value="1000"/>
            <define 
                name="FeedbackDelay"
                value="1000"/>            
            <define
                name="FeedbackTime"
                value="1000"/>
            <define
                name="Pause"
                value="1000"/>
            <define
                name="Period"
                value="(FixationDelay + ResponseTimeout + FeedbackDelay + FeedbackTime + Pause)/1000"/>
            <define 
                name="Trials"
                value="30"/>
            <define 
                name="AlphaX0"
                value="0.0"/>
            <define 
                name="AlphaN"
                value="200"/>
            <define
                name="BetaX0"
                value="-2"/> <!--  Old value: -1.2041 -->
            <define
                name="BetaX1"
                value="2"/> <!--  Old value: 1.2041 -->
            <define
                name="BetaN"
                value="50"/>
            <define 
                name="IntensityX0"
                value="0.0"/>
            <define 
                name="IntensityN"
                value="50"/>
            <define
                name="ConfidenceLevel"
                value="0.95"/>
        </defines>
        
        <tests>
            <meta-survey ID="PCS"
                control="subject"
                experimental-setup-id="survey"
                name="Pain Catastrophizing">
                <templates>
                    <likert id="PCS"
                            title="dynamic: PCSText['QUESTION']">
                        <choice value="0" label="dynamic: PCSText['L0']"/>
                        <choice value="1" label="dynamic: PCSText['L1']"/>
                        <choice value="2" label="dynamic: PCSText['L2']"/>
                        <choice value="3" label="dynamic: PCSText['L3']"/>
                        <choice value="4" label="dynamic: PCSText['L4']"/>
                    </likert>
                </templates>
                <content>
                    <likert id="I01"
                            template="PCS"
                            instruction="dynamic: PCSText['I01']" />
                    <likert id="I02"
                            template="PCS"
                            instruction="dynamic: PCSText['I02']" />
                    <likert id="I03"
                            template="PCS"
                            instruction="dynamic: PCSText['I03']" />
                    <likert id="I04"
                            template="PCS"
                            instruction="dynamic: PCSText['I04']" />
                    <likert id="I05"
                            template="PCS"
                            instruction="dynamic: PCSText['I05']" />
                    <likert id="I06"
                            template="PCS"
                            instruction="dynamic: PCSText['I06']" />
                    <likert id="I07"
                            template="PCS"
                            instruction="dynamic: PCSText['I07']" />
                    <likert id="I08"
                            template="PCS"
                            instruction="dynamic: PCSText['I08']" />
                    <likert id="I09"
                            template="PCS"
                            instruction="dynamic: PCSText['I09']" />
                    <likert id="I10"
                            template="PCS"
                            instruction="dynamic: PCSText['I10']" />
                    <likert id="I11"
                            template="PCS"
                            instruction="dynamic: PCSText['I11']" />
                    <likert id="I12"
                            template="PCS"
                            instruction="dynamic: PCSText['I12']" />
                    <likert id="I13"
                            template="PCS"
                            instruction="dynamic: PCSText['I13']" />
                </content>
            </meta-survey>

            <electrophysiology-evoked-potentials 
                ID="T01"
                name="Stop Signal Task (Training Task)"
                experimental-setup-id="image"
                response-collection="none"
                stimulus-update-rate="44100">

                <test-events 
                    selected="func: Script.Instructions(tc)"
                    complete="func: Script.Complete(tc)">
                    <instrument name="ImageDisplay"
                                interface="image-display"
                                required="true"/>
                </test-events>

                <stimulation-scripts initialize="func: Script.UpDownInitialize(tc)"
                                     stimulate="func: Script.Stimulate(tc,x)"
                                     stimulus-description="Image"
                                     stimulus-unit="N/A">
                    <instrument name="ImageDisplay"
                                interface="image-display"
                                required="true"/>
                    <instrument name="Response"
                                interface="button"
                                required="true"/>
                </stimulation-scripts>

                <stimulation-pattern time-base="seconds">
                    <sequence
                        Tperiod="Period"
                        iterations="NumberOfStimuli * TrainingStopSignals" />                        
                </stimulation-pattern>

                <stimuli order="block-random">
                    <stimulus 
                        name="GO" 
                        count="3" />
                    <stimulus 
                        name="STOP" 
                        count="1"/>
                </stimuli>

            </electrophysiology-evoked-potentials>

            <electrophysiology-evoked-potentials
                ID="T02"
                name="Stop Signal Task"
                experimental-setup-id="image"
                response-collection="none"
                stimulus-update-rate="44100">

                <test-events
                    selected="func: Script.Instructions(tc)"
                    complete="func: Script.Complete(tc)">
                    <instrument name="ImageDisplay"
                                interface="image-display"
                                required="true"/>
                </test-events>

                <stimulation-scripts initialize="func: Script.PsiInitialize(tc)"
                                     stimulate="func: Script.Stimulate(tc,x)"
                                     stimulus-description="Image"
                                     stimulus-unit="N/A">
                    <instrument name="ImageDisplay"
                                interface="image-display"
                                required="true"/>
                    <instrument name="Response"
                                interface="button"
                                required="true"/>
                </stimulation-scripts>

                <stimulation-pattern time-base="seconds">
                    <sequence
                        Tperiod="Period"
                        iterations="NumberOfStimuli * NumberOfStopSignals" />
                </stimulation-pattern>

                <stimuli order="block-random">
                    <stimulus
                        name="GO"
                        count="3" />                        
                    <stimulus
                        name="STOP"
                        count="1"/>
                </stimuli>
            </electrophysiology-evoked-potentials>                
        </tests>
        <assets>
            <file-asset id="PCSTEXT" file="PCS_TEXT_EN.py">
                <language code="DA" file="PCS_TEXT_DA.py"/>
                <language code="IT" file="PCS_TEXT_IT.py"/>
            </file-asset>
            <file-asset id="Images" file="Images.zip" />
            <file-asset id="Script" file="Script.py" />            
        </assets>        
    </protocol>
</experiment>
